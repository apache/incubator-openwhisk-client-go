/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x06\xbe\x38\x05\xbc\x7a\x80\xed\x29\x68\x8d\x3a\xe8\x76\x63\x74\x9d\xee\xa1\x29\x0a\x46\x1c\x5b\x83\xc8\xa4\x76\x48\x39\xf5\x1a\x7a\xf7\x62\x28\x7b\xed\x6e\x2c\xeb\xc7\x4a\x9a\x93\x05\x9a\xf3\xcd\xc7\x99\xe1\xfc\xf0\xcf\x01\xc0\x76\x00\x00\x30\x24\x3d\x7c\x0f\xc3\x3b\xa3\x1e\x52\x04\x6f\x41\x69\x0d\x6c\x73\x8f\x60\x33\x4f\xd6\x38\x18\x6d\xb7\xd1\xee\xbb\x28\x46\xc3\x71\x29\xe7\x59\x19\x97\x2a\x59\xae\x01\x78\x0f\xc7\x00\xc3\x01\x40\x31\xae\xd6\x1f\x33\x2a\x8f\x30\x9d\xcf\x67\xc0\xf8\x25\x47\xe7\x61\x61\x19\x66\x77\xf3\xc0\x24\x40\x17\xc5\x28\xa0\x22\x73\x51\xd4\x32\xea\x00\xd9\x91\xe4\x2f\x93\xde\x49\x9e\x81\xec\x48\xf2\xe7\xc9\x87\xc9\x7c\xd2\x37\xcf\xf3\xa8\x5d\x9d\x7e\xfb\xa9\x7f\xaf\x9f\xc1\xac\xa1\xa9\xb2\x0c\x8d\xae\xb8\x18\xb2\xe1\xee\xf7\x0f\xbb\xd8\xef\x48\xfa\x72\x0d\xcd\x2c\xbd\x37\x88\xc0\x09\x50\xce\x69\x27\xeb\xd6\xe2\x9c\xa4\x73\x63\xd6\x2a\x25\xdd\x95\x45\x63\xf1\x93\xca\x27\xcc\x96\x01\x4d\x6c\x35\x99\xe5\x37\x90\x07\xab\x37\xb5\x9a\x9b\xc9\x9e\x51\x4b\x86\x3c\xa9\x94\xbe\x1e\x89\x37\xd4\x5a\x23\x5a\x17\xba\x5a\x83\x4f\x76\xd7\x41\xe5\x3e\x41\xe3\x29\x0e\x2a\x20\x41\xa5\x91\xdb\x44\x69\x1b\xb0\x93\xc4\xae\x73\x9f\x58\xa6\xaf\xa5\xcc\x23\x6e\x80\x1c\x18\xeb\x21\xb6\x66\x41\xcb\x9c\x51\xc3\xd5\xbb\x77\x82\x2d\xff\xc8\x71\x89\x51\xff\x50\x41\xad\x33\xdc\x69\x72\x06\xae\x67\x37\x90\x58\xe7\x61\x95\x8b\x7f\x11\x32\xb6\x6b\xd2\xa8\xa3\x7b\x53\xc5\xa1\x46\xaa\x81\x83\x5e\xbf\xee\xfe\x64\x57\x2b\x65\x34\x2c\x14\xa5\xa8\x41\xe7\x25\x94\x29\x5d\x2b\xab\x39\x63\x85\xea\x66\xb2\x27\xd5\x7e\xb4\x40\xc6\x23\x2f\x54\x7c\x30\xd2\x8f\x60\xec\x3e\x5d\xbb\xcc\x1a\x87\xe1\x62\x01\xfe\x93\x61\xec\x51\x57\xd0\xe8\x86\xd5\xce\x1a\x41\x81\x51\x69\x57\x8b\x3c\x93\x3f\xa9\x7e\x9e\x20\x2c\x6c\x9a\xda\x27\xb9\xe2\x2a\xcb\xd2\xfd\xa5\xc2\x90\x01\x9e\x94\x84\x6e\x8c\xb4\x46\x5d\x7b\x5b\x3b\x82\xbd\xbd\x7c\xfd\x66\x73\xd8\x01\x4b\x0e\x94\x29\x76\x65\x51\x5e\x23\x3b\xb2\xa6\x5d\x3d\x6d\x00\x71\x61\x4f\xda\xb5\xc4\x37\x07\xec\x4e\xb0\x1f\x56\xcd\xa9\x3c\xe4\x94\xfe\x27\x1e\x5b\x10\x38\x27\xdb\xcc\x02\x62\xc0\x67\xfc\x2f\xeb\x72\xdb\x40\x36\x23\x29\xc3\x51\xcf\x24\xdb\x40\x36\x23\xb9\x1b\x3a\x7a\xe6\xd9\x12\xb5\xa1\x3d\x65\xec\xe8\xdb\xa0\x6d\x30\x2b\x32\xfb\xae\x30\x85\xa2\x10\xc1\x3e\x55\x3b\xaf\xbe\x35\x12\x01\x30\x2c\x14\xc5\x28\x82\x3f\xc2\x86\x7d\x93\xa2\x18\xe1\x7e\xa8\x62\x4f\x6b\xbc\x1f\x82\x54\xbf\xfb\x21\x99\xfd\x42\x54\x59\x12\x5e\x5a\x6f\x8d\x57\xca\x5c\xbb\xaf\x44\x1d\x5c\x50\x0b\x50\x47\x80\x6d\x8c\xce\x05\x84\x2f\x39\xf2\xa6\xa2\xef\x6b\x43\xa9\x3d\xe4\x49\x92\xdb\x6d\xb4\x72\xcb\xa2\x80\xab\xd8\x6a\x94\xcd\xf2\x5b\x14\x55\xdd\x77\xf5\xfe\xca\x36\x27\xb6\xc6\x60\x1c\xbc\x5c\x36\x4b\x63\xb0\x0c\x9e\x56\xa8\xc1\xe6\x3e\x82\xab\x10\xd6\xe2\xfd\xdc\x41\x33\x1a\x97\xe3\xb6\x9e\x9d\xc7\xf0\x80\xb1\xca\x1d\xc2\x6d\x86\xe6\x73\x42\xee\xf1\x30\x04\x90\x83\x15\x39\x47\x66\xd9\x61\x9a\x6e\x8a\x7c\x01\x65\xe9\x7e\x54\x46\x25\xa4\x44\x88\x7c\x14\xc5\x48\xe0\xa9\xbc\x8f\x17\x3d\x08\x74\xd5\x54\x73\x24\xdc\x7d\x89\xb7\x91\x3d\x2d\xa4\x6b\x43\x88\x13\x8c\x1f\xa5\xd5\xdd\x75\xdd\xf2\x3f\xa3\x72\xd6\x1c\xa0\xab\x87\xb7\xde\xe0\x4f\x92\x3f\xeb\x42\xb8\x9a\xa5\xa8\x1c\x1e\x66\x55\xf8\x3c\xbd\xf9\xf4\xeb\xdf\xd7\xb3\x9b\xa9\x24\x78\x32\x10\x3d\xb9\xc7\x8c\x6d\xe6\x20\x37\x1a\x39\x68\x77\x1b\xe7\x71\x05\xd3\xdb\xdf\x26\xa0\x89\x31\xf6\x96\x37\x51\xd5\xe5\x78\x55\x0a\xbd\x18\xe1\x49\xf6\x46\x2a\xa3\x10\x2d\x51\xc6\xd6\xdb\xf1\xf7\xab\x46\xad\x30\x24\xff\xef\x77\x5b\xf6\xc2\xba\x5c\x16\xde\xe2\x4b\x3c\x26\x7f\x3b\x9b\x7c\x2c\x4f\xf9\x42\x26\xfc\x1f\x0f\x50\xf9\xe6\x72\x34\xe4\xec\x5e\x49\xaa\xf9\x5f\xdf\xcd\xa7\xfd\x04\xdf\x6b\x68\xee\xe5\xc8\x1e\x9d\x27\xb3\x8c\xc2\x43\x91\x72\x41\x61\xa6\x7c\x02\x76\x51\x26\xb1\xe7\x78\x0b\x4a\xb1\xef\x48\x7b\xf3\xb4\xc5\xd8\x83\xbf\x06\xff\x06\x00\x00\xff\xff\xaa\xe9\xfe\x28\x47\x1a\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 6727, mode: os.FileMode(420), modTime: time.Unix(1508259166, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500156160, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

